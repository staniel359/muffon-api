---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/music/+releases/coming-soon/popular?page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41
        Safari/537.36
      Cookie:
      - lfmanon=0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Language:
      - en
      Set-Cookie:
      - X-UA-Country-Code=BY; max-age=60; secure; same-site=strict; Path=/
      - X-UA-Device-Type=desktop; max-age=60; secure; same-site=strict; Path=/
      - lfmanon=1; Path=/
      - lpfrmo=0; Domain=last.fm; expires=Sat, 05 Jul 2025 08:09:19 GMT; Max-Age=60;
        Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjIwZTU2YjQwLWY2ZDAtNDA5ZS04NGVlLTVmMjlkZTdiNzdiYyJ9:1uXxwZ:rtPV_84T9JTEiVlz4PC7V3sXjk56nU0H3AtZEd8-wWk;
        Domain=.last.fm; expires=Sun, 05 Jul 2026 08:08:19 GMT; HttpOnly; Max-Age=31536000;
        Path=/; SameSite=Lax; Secure
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Server:
      - nginx
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Frame-Options:
      - DENY
      X-Pjax-Url:
      - https://www.last.fm/music/+releases/coming-soon/popular?page=2
      Etag:
      - W/"83588beb6eee93b66ccdd294d0f7da0f"
      Accept-Ranges:
      - bytes
      Content-Type:
      - text/html; charset=utf-8
      Via:
      - 1.1 google, 1.1 varnish, 1.1 varnish
      Date:
      - Sat, 05 Jul 2025 08:08:20 GMT
      X-Served-By:
      - cache-fra-etou8220023-FRA, cache-fra-etou8220076-FRA
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1751702899.283502,VS0,VE743
      Vary:
      - Accept-Encoding, Accept-Language, Cookie
      X-Lfm-Upstream:
      - "/music/+releases/coming-soon/popular?page=2"
      X-Lfm-Upstream-Type:
      - PASS
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '0'
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 05 Jul 2025 08:08:20 GMT
recorded_with: VCR 6.3.1
