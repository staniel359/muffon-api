---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/music/lady+gaga/+events?page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41
        Safari/537.36
      Cookie:
      - lfmanon=0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '0'
      Content-Language:
      - en
      Set-Cookie:
      - X-UA-Country-Code=BY; max-age=60; secure; same-site=strict; Path=/
      - X-UA-Device-Type=desktop; max-age=60; secure; same-site=strict; Path=/
      - corrections_redirect="%7B%22for_url%22%3A%20%22/music/Lady%2BGaga/%2Bevents%3Fpage%3D2%22%2C%20%22incorrect_resource%22%3A%20%7B%22type%22%3A%20%22artist%22%2C%20%22props%22%3A%20%7B%22url%22%3A%20%22/music/Lady%2BGaga/%2Bevents%22%2C%20%22name%22%3A%20%22Lady%20Gaga%22%7D%7D%7D";
        expires=Sat, 05 Jul 2025 08:13:32 GMT; Max-Age=10; Path=/
      - lfmanon=1; Path=/
      - lpfrmo=0; Domain=last.fm; expires=Sat, 05 Jul 2025 08:14:22 GMT; Max-Age=60;
        Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6ImU5YTFhOTc3LTZlOTMtNGUzOS04ZDNlLTdlMmU3YzI5ZTA0OCJ9:1uXy1S:qO_CzgJpGhVIeUNO_QdA3-huvaq_AcSmuAxNVZlOa8Q;
        Domain=.last.fm; expires=Sun, 05 Jul 2026 08:13:22 GMT; HttpOnly; Max-Age=31536000;
        Path=/; SameSite=Lax; Secure
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Server:
      - nginx
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Frame-Options:
      - DENY
      Accept-Ranges:
      - bytes
      Content-Type:
      - text/html; charset=utf-8
      Via:
      - 1.1 google, 1.1 varnish, 1.1 varnish
      X-Pjax-Url:
      - https://www.last.fm/music/lady%2Bgaga/+events?page=2
      Location:
      - "/music/Lady+Gaga/+events?page=2"
      Date:
      - Sat, 05 Jul 2025 08:13:22 GMT
      X-Served-By:
      - cache-ams2100102-AMS, cache-ams21083-AMS
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1751703201.402177,VS0,VE1038
      Vary:
      - Accept-Language, Cookie
      X-Lfm-Upstream:
      - "/music/lady%2Bgaga/+events?page=2"
      X-Lfm-Upstream-Type:
      - PASS
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '0'
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 05 Jul 2025 08:13:22 GMT
- request:
    method: get
    uri: https://www.last.fm/music/Lady+Gaga/+events?page=2
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41
        Safari/537.36
      Cookie:
      - lfmanon=0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Language:
      - en
      Set-Cookie:
      - X-UA-Country-Code=BY; max-age=60; secure; same-site=strict; Path=/
      - X-UA-Device-Type=desktop; max-age=60; secure; same-site=strict; Path=/
      - csrftoken=SfWSlA3EbhAEN7vhXw2l36Jr7GMMGtAK; expires=Sat, 04 Jul 2026 08:13:23
        GMT; Max-Age=31449600; Path=/; SameSite=Lax; Secure
      - lfmanon=1; Path=/
      - lpfrmo=0; Domain=last.fm; expires=Sat, 05 Jul 2025 08:14:23 GMT; Max-Age=60;
        Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjA4MDJiNzZmLTI3MjUtNDAzYS05ZWJkLTBjMjE3NjRmNTc0NCJ9:1uXy1T:lUTqEfRQB83vdHyj7ZfyctaKeByE-bcigcxYk06ND-0;
        Domain=.last.fm; expires=Sun, 05 Jul 2026 08:13:23 GMT; HttpOnly; Max-Age=31536000;
        Path=/; SameSite=Lax; Secure
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Server:
      - nginx
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Frame-Options:
      - DENY
      X-Pjax-Url:
      - https://www.last.fm/music/Lady+Gaga/+events?page=2
      Etag:
      - W/"8363415aadb5f42289a32cb84fdb2e75"
      Accept-Ranges:
      - bytes
      Content-Type:
      - text/html; charset=utf-8
      Via:
      - 1.1 google, 1.1 varnish, 1.1 varnish
      Date:
      - Sat, 05 Jul 2025 08:13:23 GMT
      X-Served-By:
      - cache-ams2100122-AMS, cache-ams21026-AMS
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1751703203.689744,VS0,VE442
      Vary:
      - Accept-Encoding, Cookie, Accept-Language
      X-Lfm-Upstream:
      - "/music/Lady+Gaga/+events?page=2"
      X-Lfm-Upstream-Type:
      - PASS
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '0'
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 05 Jul 2025 08:13:23 GMT
recorded_with: VCR 6.3.1
