---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/music/wejlhg239gh23/+images?page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41
        Safari/537.36
      Cookie:
      - lfmanon=0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Content-Language:
      - en
      Set-Cookie:
      - X-UA-Country-Code=BY; max-age=60; secure; same-site=strict; Path=/
      - X-UA-Device-Type=desktop; max-age=60; secure; same-site=strict; Path=/
      - lfmanon=1; Path=/
      - lpfrmo=0; Domain=last.fm; expires=Sat, 05 Jul 2025 08:10:54 GMT; Max-Age=60;
        Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6IjIyMDg2OTAxLTgwODQtNDMwNS04MDY2LTdjYzM3MjZmYTViMSJ9:1uXxy6:0tPFrEUDqhhPyXa1bY6xFvtnkrLc3-x55bWoPALNHvE;
        Domain=.last.fm; expires=Sun, 05 Jul 2026 08:09:54 GMT; HttpOnly; Max-Age=31536000;
        Path=/; SameSite=Lax; Secure
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Server:
      - nginx
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      X-Frame-Options:
      - DENY
      X-Pjax-Url:
      - https://www.last.fm/music/wejlhg239gh23/+images?page=1
      Etag:
      - W/"0b4a3f80d46dc6a859d1543555cb6181"
      Accept-Ranges:
      - bytes
      Content-Type:
      - text/html; charset=utf-8
      Via:
      - 1.1 google, 1.1 varnish, 1.1 varnish
      Date:
      - Sat, 05 Jul 2025 08:09:54 GMT
      X-Served-By:
      - cache-fra-etou8220153-FRA, cache-fra-etou8220076-FRA
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1751702995.668963,VS0,VE251
      Vary:
      - Accept-Encoding, Accept-Language, Cookie
      X-Lfm-Upstream:
      - "/music/wejlhg239gh23/+images?page=1"
      X-Lfm-Upstream-Type:
      - PASS
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '0'
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 05 Jul 2025 08:09:54 GMT
recorded_with: VCR 6.3.1
