---
http_interactions:
- request:
    method: get
    uri: https://www.last.fm/tag/wejlhg239gh23/artists?page=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.41
        Safari/537.36
      Cookie:
      - lfmanon=0
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      X-Frame-Options:
      - DENY
      Content-Type:
      - text/html; charset=utf-8
      Content-Security-Policy-Report-Only:
      - 'default-src https: ''unsafe-inline'' ''unsafe-eval'' wss: ;img-src https:
        data: blob: ; font-src https: data:; form-action https: http://www.last.fm;
        report-uri https://cbsi.report-uri.io/r/default/csp/enforce'
      Server:
      - nginx
      Via:
      - 1.1 google, 1.1 varnish, 1.1 varnish
      X-Pjax-Url:
      - https://www.last.fm/tag/wejlhg239gh23/artists?page=1
      Etag:
      - W/"f169815c2e17e78c87e6d4b4d3de87f5"
      Content-Language:
      - en
      Content-Security-Policy:
      - upgrade-insecure-requests;
      Accept-Ranges:
      - bytes
      Set-Cookie:
      - X-UA-Country-Code=BY; max-age=60; secure; same-site=strict; Path=/
      - X-UA-Device-Type=desktop; max-age=60; secure; same-site=strict; Path=/
      - lfmanon=1; Path=/
      - lpfrmo=0; Domain=last.fm; expires=Sat, 05 Jul 2025 08:16:33 GMT; Max-Age=60;
        Path=/; Secure
      - not_first_visit=1; Path=/
      - sessionid=eyJfYXV0aF91c2VyX2hhc2giOiJkZWZhdWx0Iiwic2Vzc2lvbl9pZCI6ImJkYWFhM2I2LWNiNmUtNGU4Zi1hZTI0LTg5MTdlMDk1MGQ4NSJ9:1uXy3Z:xAbG0b-LjkmEbIR4jcAJ2Vx3aRFmgkIse5ienKj3H7U;
        Domain=.last.fm; expires=Sun, 05 Jul 2026 08:15:33 GMT; HttpOnly; Max-Age=31536000;
        Path=/; SameSite=Lax; Secure
      Date:
      - Sat, 05 Jul 2025 08:15:33 GMT
      X-Served-By:
      - cache-ams2100117-AMS, cache-ams21050-AMS
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1751703334.713790,VS0,VE194
      Vary:
      - Accept-Encoding, Accept-Language, Cookie
      X-Lfm-Upstream:
      - "/tag/wejlhg239gh23/artists?page=1"
      X-Lfm-Upstream-Type:
      - PASS
      X-Request-Category:
      - page
      X-Lfm-Cacheable-Page:
      - '0'
      Cache-Control:
      - max-age=0, must-revalidate
      Strict-Transport-Security:
      - max-age=300
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 05 Jul 2025 08:15:33 GMT
recorded_with: VCR 6.3.1
